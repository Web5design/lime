// Generated by CoffeeScript 1.3.3
(function() {
  var RDF, URI,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.LIMEPlayer = (function() {

    function LIMEPlayer(opts) {
      var cmf, options,
        _this = this;
      cmf = new CMF("http://connectme.salzburgresearch.at/CMF");
      options = {
        containerDiv: "mainwrapper",
        videoPlayerSize: {
          "width": 640,
          "height": 360
        },
        annotations: [],
        annotFrameworkURL: "http://labs.newmedialab.at/SKOS/",
        plugins: {
          TestPlugin: {}
        },
        platform: "web",
        fullscreen: false,
        fullscreenLayout: {
          "AnnotationNorth": 50,
          "AnnotationWest": 300,
          "AnnotationSouth": 50,
          "AnnotationEast": 300
        },
        widgetContainers: [
          {
            element: jQuery('#widget-container-1'),
            orientation: 'vertical'
          }
        ],
        usedSpaceNWSE: {
          "north": 0,
          "west": 0,
          "south": 0,
          "east": 0
        },
        annotationsVisible: true,
        debug: false,
        preferredLanguage: "en",
        builtinPlugins: {
          AnnotationOverlays: {},
          LDPlugin: {}
        }
      };
      this.options = $.extend(options, opts);
      this.widgetContainers = this.options.widgetContainers;
      this._initVideoPlayer(function() {
        return _this._loadAnnotations(function() {
          return _this._initPlugins(function() {
            return _this._startScheduler();
          });
        });
      });
    }

    LIMEPlayer.prototype.getLength = function() {
      return this.player.duration();
    };

    LIMEPlayer.prototype.seek = function(pos) {
      if (pos !== void 0) {
        return this.player.currentTime(pos);
      }
    };

    LIMEPlayer.prototype.currentTime = function() {
      return this.player.currentTime();
    };

    LIMEPlayer.prototype.play = function() {
      return this.player.play();
    };

    LIMEPlayer.prototype._startScheduler = function() {
      /* handle becomeActive and becomeInactive events
      */
      return jQuery(this).bind('timeupdate', function(e) {
        var annotation, currentTime, _i, _len, _ref, _results;
        _ref = this.annotations;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          annotation = _ref[_i];
          currentTime = e.currentTime;
          if (annotation.state === 'inactive' && annotation.start < currentTime && annotation.end + 1 > currentTime) {
            annotation.state = 'active';
            jQuery(annotation).trigger(jQuery.Event("becomeActive", {
              annotation: annotation
            }));
          }
          if (annotation.state === 'active' && (annotation.start > currentTime || annotation.end + 1 < currentTime)) {
            annotation.state = 'inactive';
            _results.push(jQuery(annotation).trigger(jQuery.Event("becomeInactive", {
              annotation: annotation
            })));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    };

    LIMEPlayer.prototype._initVideoPlayer = function(cb) {
      var displaysrc, i, locator, _i, _len, _ref,
        _this = this;
      displaysrc = '';
      _ref = this.options.video;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        locator = _ref[i];
        displaysrc = displaysrc + ("<source src=" + locator.source + " type='" + locator.type + "' />");
      }
      $("#" + this.options.containerDiv).append("<div class='videowrapper' id='videowrapper'>\n  <video id='video_player' class='video-js vjs-default-skin' controls preload='none' width='640' height='360' poster='img/connectme-video-poster.jpg'>\n    " + displaysrc + "\n  </video>\n</div>\n<div class=\"annotation-wrapper\" id=\"annotation-wrapper\" style=\"display: none;\">\n<div class=\"north fullscreen-annotation\" style=\"height: " + this.options.fullscreenLayout.AnnotationNorth + "px\"></div>\n  <div class=\"west fullscreen-annotation\" style=\"height: " + this.options.fullscreenLayout.AnnotationSouth + "px\"></div>\n  <div class=\"east fullscreen-annotation\" style=\"height: " + this.options.fullscreenLayout.AnnotationEast + "px\"></div>\n  <div class=\"south fullscreen-annotation\" style=\"height: " + this.options.fullscreenLayout.AnnotationNorth + "px\"></div>\n</div>");
      return _.defer(function() {
        _this.player = _V_('video_player', {
          flash: {
            iFrameMode: true
          },
          swf: "lib/videojs/video-js.swf"
        });
        _this.player.addEvent("loadedmetadata", function() {
          _this._initEventListeners();
          return cb();
        });
        return _this.player.ready(function() {
          _this.player.isFullScreen = _this.options.fullscreen;
          _this._nonfullscreen_containers = LimePlayer.widgetContainers;
          _this.player.addComponent("AnnotationsSidebars");
          _this.player.controlBar.addComponent("AnnotationToggle");
          if (!_this.player.isFullScreen) {
            _this.player.AnnotationsSidebars.hide();
          } else {
            _this.player.AnnotationsSidebars.show();
          }
          _this.player.play();
          return console.info("Setting up VideoJS Player", _this.player);
        });
      });
    };

    LIMEPlayer.prototype._initEventListeners = function() {
      var _this = this;
      this.player.addEvent('timeupdate', function(playerEvent) {
        var e;
        e = jQuery.Event("timeupdate", {
          currentTime: _this.player.currentTime()
        });
        return jQuery(_this).trigger(e);
      });
      return this.player.addEvent('fullscreenchange', function(e) {
        var fsce;
        fsce = jQuery.Event('fullscreenchange', {
          isFullScreen: _this.player.isFullScreen
        });
        jQuery(_this.player).trigger(fsce);
        return _this._moveWidgets(_this.player.isFullScreen);
      });
    };

    LIMEPlayer.prototype._loadAnnotations = function(cb) {
      console.info("Loading annotations from LMF");
      this.annotations = this.options.annotations;
      return cb();
      /*
          query = """
            PREFIX oac: <http://www.openannotation.org/ns/>
            PREFIX ma: <http://www.w3.org/ns/ma-ont#>
            SELECT ?annotation ?fragment ?resource ?relation
            WHERE { <#{@options.video[0]}>  ma:hasFragment ?f.
               ?f ma:locator ?fragment.
               ?annotation oac:target ?f.
               ?annotation oac:body ?resource.
               ?f ?relation ?resource.
            }
          """
          uri = "#{@options.annotFrameworkURL}sparql/select?query=#{encodeURIComponent(query)}&output=json"
          $.getJSON uri, (data) =>
            # $.getJSON "annotations.json", (data) =>
            list = data.results.bindings
            # list = _.filter list, (el) ->
              # el.annotation.value in ["http://connectme.at/annotation/f06b99c2fd576042facae4225cb9fed2", "http://connectme.at/annotation/577e5d16435dfc2a0d24223926477f82"]
            for i, annotation of list
              @annotations.push new Annotation annotation
            console.info "Annotations loaded from", uri, @annotations
            cb()
      */

    };

    LIMEPlayer.prototype._moveWidgets = function(isFullscreen) {
      var annotation, _i, _len, _ref;
      console.log("fullscreen", isFullscreen, ", Visible " + LimePlayer.options.annotationsVisible);
      if (isFullscreen && LimePlayer.options.annotationsVisible) {
        LimePlayer.widgetContainers = [
          {
            element: jQuery('.west'),
            orientation: 'vertical'
          }, {
            element: jQuery('.north'),
            orientation: 'horizontal'
          }, {
            element: jQuery('.east'),
            orientation: 'vertical'
          }, {
            element: jQuery('.south'),
            orientation: 'horizontal'
          }
        ];
        LimePlayer.player.AnnotationsSidebars.show();
      } else {
        LimePlayer.widgetContainers = this._nonfullscreen_containers;
        LimePlayer.player.AnnotationsSidebars.hide();
      }
      _ref = LimePlayer.annotations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        if (annotation.state === 'active') {
          jQuery(annotation).trigger(jQuery.Event("becomeInactive", {
            annotation: annotation
          }));
          jQuery(annotation).trigger(jQuery.Event("becomeActive", {
            annotation: annotation
          }));
        }
      }
      return console.info("_moveWidgets", isFullscreen);
    };

    LIMEPlayer.prototype._initPlugins = function(cb) {
      var options, pluginClass, _ref, _ref1;
      this.plugins = [];
      _ref = this.options.builtinPlugins;
      for (pluginClass in _ref) {
        options = _ref[pluginClass];
        this.plugins.push(new window[pluginClass](this, options));
      }
      _ref1 = this.options.plugins;
      for (pluginClass in _ref1) {
        options = _ref1[pluginClass];
        this.plugins.push(new window[pluginClass](this, options));
      }
      return cb();
    };

    LIMEPlayer.prototype.allocateWidgetSpace = function(options) {
      var container, res,
        _this = this;
      if (options && options.preferredContainer && this._hasFreeSpace(options.preferredContainer, options)) {
        container = options.preferredContainer;
      } else {
        container = _(this.widgetContainers).detect(function(cont) {
          return _this._hasFreeSpace(cont, options);
        });
      }
      if (container) {
        container.element.prepend("<div class='lime-widget'></div>");
        res = jQuery(".lime-widget:first", container.element);
        console.info('widgetspace allocated', res[0]);
        return res;
      } else {
        console.error("There's not enough space for a widget to be shown!");
        if (this.options.debug) {
          debugger;
        }
        return false;
      }
      /*
          container = _(@widgetContainers).detect (cont) =>
            @_hasFreeSpace cont, options
          if container
            container.element.prepend "<div class='lime-widget'>123</div>"
            jQuery('.lime-widget:first', container.element)
          else
            no
      */

    };

    LIMEPlayer.prototype._hasFreeSpace = function(container, options) {
      var currentHeight, maxHeight;
      currentHeight = container.element.height();
      maxHeight = parseInt(container.element.css("max-height"));
      if ((!maxHeight) || (maxHeight === NaN)) {
        maxHeight = $(window).height() - 300;
      }
      if (maxHeight - currentHeight < 200) {
        return false;
      } else {
        return true;
      }
    };

    LIMEPlayer.prototype.getAnnotationsFor = function(uri, cb) {};

    return LIMEPlayer;

  })();

  window.Annotation = (function() {

    function Annotation(hash) {
      var fragmentHash, startEnd, t, xywh, _ref, _ref1, _ref2, _ref3,
        _this = this;
      this.annotation = hash.annotation.value;
      this.start = 0;
      this.end = -1;
      this.state = 'inactive';
      this.widgets = {};
      jQuery(this).bind("mouseenter", function(e) {
        var widget, widgetname, _ref, _results;
        _ref = _this.widgets;
        _results = [];
        for (widgetname in _ref) {
          widget = _ref[widgetname];
          _results.push(jQuery(widget).addClass("hover"));
        }
        return _results;
      });
      jQuery(this).bind("mouseleave", function(e) {
        var widget, widgetname, _ref, _results;
        _ref = _this.widgets;
        _results = [];
        for (widgetname in _ref) {
          widget = _ref[widgetname];
          _results.push(jQuery(widget).removeClass("hover"));
        }
        return _results;
      });
      if (hash.fragment.type = 'uri') {
        this.fragment = new URI(hash.fragment.value);
        fragmentHash = this.fragment.hash;
        t = fragmentHash.match(/t=([0-9,]*)/);
        if (t) {
          t = t[1];
          startEnd = t.match(/([0-9]{1,})/g);
          if (startEnd) {
            this.start = Number(startEnd[0]);
            this.end = Number(startEnd[1]) || -1;
          }
        }
        xywh = fragmentHash.match(/xywh=([a-z0-9,:]*)/);
        if (xywh) {
          this.isPercent = xywh[1].indexOf('percent') !== -1;
          _ref = _(xywh[1].match(/([0-9]{1,})/g)).map(function(n) {
            return Number(n);
          }), this.x = _ref[0], this.y = _ref[1], this.w = _ref[2], this.h = _ref[3];
        }
      }
      this.isSpacial = this.x !== void 0 || ((((this.x === (_ref3 = this.y) && _ref3 === (_ref2 = this.w)) && _ref2 === (_ref1 = this.h)) && _ref1 === 0));
      this.resource = new URI(hash.resource.value);
      this.relation = new URI(hash.relation.value);
    }

    Annotation.prototype.toString = function() {
      return this.resource.value;
    };

    return Annotation;

  })();

  URI = (function() {

    function URI(uri) {
      var hash;
      this.value = decodeURIComponent(uri);
      hash = uri.match(/^.*?#([a-zA-Z0-9,&=:]*)$/);
      if (hash) {
        this.hash = hash[1];
      } else {
        this.hash = '';
      }
      this.type = 'uri';
    }

    URI.prototype.toString = function() {
      return this.value;
    };

    return URI;

  })();

  window.LimePlugin = (function() {

    function LimePlugin(lime, options) {
      this.lime = lime;
      this.options = jQuery.extend(options, this.defaults);
      this.init();
    }

    LimePlugin.prototype.defaults = {};

    LimePlugin.prototype.init = function() {
      return console.error("All Lime plugins have to implement the init method!");
    };

    return LimePlugin;

  })();

  window.TestPlugin = (function(_super) {

    __extends(TestPlugin, _super);

    function TestPlugin() {
      return TestPlugin.__super__.constructor.apply(this, arguments);
    }

    TestPlugin.prototype.init = function() {
      var annotation, _i, _len, _ref, _results,
        _this = this;
      console.info("Initialize TestPlugin");
      jQuery(this.lime).bind('timeupdate', function(e) {});
      _ref = this.lime.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        jQuery(annotation).bind('becomeActive', function(e) {
          var domEl;
          annotation = e.target;
          console.info(annotation, 'became active');
          domEl = _this.lime.allocateWidgetSpace();
          if (domEl) {
            domEl.html("<a href='" + annotation.resource + "' target='_blank'>" + annotation.resource + "</a>");
            if (annotation.ldLoaded) {
              domEl.html(_this.renderAnnotation(annotation));
            } else {
              jQuery(annotation).bind('ldloaded', function(e2) {
                annotation = e2.target;
                return domEl.html(_this.renderAnnotation(annotation));
              });
            }
            return annotation.widgets.TestPlugin = domEl;
          } else {

          }
        });
        _results.push(jQuery(annotation).bind("becomeInactive", function(e) {
          annotation = e.target;
          console.info(annotation, 'became inactive');
          annotation.widgets.TestPlugin.remove();
          if (annotation.widgets) {
            return delete annotation.widgets.TestPlugin;
          } else {
            debugger;
          }
        }));
      }
      return _results;
    };

    TestPlugin.prototype.renderAnnotation = function(annotation) {
      var depiction, label, page, props;
      props = annotation.entity;
      label = annotation.getLabel();
      depiction = annotation.getDepiction();
      page = annotation.getPage();
      return "<p>\n  <a href=\"" + page + "\" target=\"_blank\">" + label + "</a>\n</p>\n<p>\n  <img src=\"" + depiction + "\" width=\"200\"/>\n</p>";
    };

    return TestPlugin;

  })(window.LimePlugin);

  _V_.AnnotationToggle = _V_.Button.extend({
    buttonText: "Annotations On/Off",
    buildCSSClass: function() {
      return "vjs-annotationstoggler " + this._super();
    },
    onClick: function() {
      if (LimePlayer.options.annotationsVisible === false) {
        $(".vjs-annotationstoggler").removeClass("annotationstoggler-off");
        LimePlayer.options.annotationsVisible = true;
        if (LimePlayer.player.AnnotationOverlaysComponent) {
          LimePlayer.player.AnnotationOverlaysComponent.show();
        }
        if (this.player.isFullScreen) {
          LimePlayer.player.AnnotationsSidebars.show();
        } else {
          LimePlayer.player.AnnotationsSidebars.hide();
        }
      } else {
        $(".vjs-annotationstoggler").addClass("annotationstoggler-off");
        LimePlayer.player.AnnotationsSidebars.hide();
        if (LimePlayer.player.AnnotationOverlaysComponent) {
          LimePlayer.player.AnnotationOverlaysComponent.hide();
        }
        LimePlayer.options.annotationsVisible = false;
      }
      return console.log("fullscreen " + this.player.isFullScreen, "visible " + LimePlayer.options.annotationsVisible);
    }
  });

  _V_.AnnotationsSidebars = _V_.Component.extend({
    options: {
      loadEvent: "play"
    },
    init: function(player, options) {
      this._super(player, options);
      player.addEvent("fullscreenchange", this.proxy(function() {
        if (this.player.isFullScreen === false) {
          return this.hide();
        }
      }));
      player.addEvent("play", this.proxy(function() {
        this.fadeIn();
        return this.player.addEvent("mouseover", this.proxy(this.fadeIn));
      }));
      return this.player.AnnotationsSidebars = this;
    },
    createElement: function() {
      return $(".annotation-wrapper", this.el).show()[0];
    },
    fadeIn: function() {
      return this._super();
    },
    fadeOut: function() {
      return this._super();
    },
    lockShowing: function() {
      return this.el.style.opacity = "1";
    }
  });

  window.CMF = (function() {

    function CMF(url) {
      this.url = url;
      this.url = this.url.replace(/\/$/, '') + '/';
    }

    CMF.prototype.getVideos = function(resCB) {
      var query, res;
      res = [];
      query = this._videosQuery;
      return this._runSPARQL(query, resCB);
    };

    CMF.prototype._videosQuery = "PREFIX mao: <http://www.w3.org/ns/ma-ont#>\nPREFIX oac: <http://www.openannotation.org/ns/>\nPREFIX yoovis: <http://yoovis.at/ontology/08/2012/>\nSELECT DISTINCT ?instance ?title ?thumbnail\nWHERE { ?instance a mao:MediaResource.\n?instance mao:title ?title.\n?instance yoovis:hasThumbnail ?thumbnail.}\nORDER BY ?instance";

    CMF.prototype.getAnnotatedVideos = function(resCB) {
      var query;
      query = this._annotatedVideosQuery;
      return this._runSPARQL(query, resCB);
    };

    CMF.prototype._annotatedVideosQuery = "PREFIX mao: <http://www.w3.org/ns/ma-ont#>\nPREFIX oac: <http://www.openannotation.org/ns/>\nPREFIX yoovis: <http://yoovis.at/ontology/08/2012/>\nSELECT DISTINCT ?instance ?title ?thumbnail\nWHERE { ?instance a mao:MediaResource.\n?instance mao:title ?title.\n?instance mao:hasFragment ?fragment.\n?instance yoovis:hasThumbnail ?thumbnail.\n?annotation a oac:Annotation.\n?annotation oac:target ?fragment.\n?annotation oac:body ?body}\nORDER BY ?instance";

    CMF.prototype.getAnnotationsForVideoOrLocator = function(url, resCB) {
      var cb, res, waitfor;
      res = [];
      waitfor = 2;
      cb = function(err, annotations) {
        if (err) {
          console.error(err, annotations);
          resCB(err, annotations);
          return;
        }
        res = res.concat(annotations);
        waitfor--;
        if (waitfor === 0) {
          return resCB(null, res);
        }
      };
      this.getAnnotationsForLocator(url, cb);
      return this.getAnnotationsForVideo(url, cb);
    };

    CMF.prototype.getLocatorsForVideoOrLocator = function(url, resCB) {
      var cb, res, waitfor;
      res = [];
      waitfor = 2;
      cb = function(err, annotations) {
        if (err) {
          console.error(err, annotations);
          resCB(err, annotations);
          return;
        }
        res = res.concat(annotations);
        waitfor--;
        if (waitfor === 0) {
          return resCB(null, res);
        }
      };
      this.getVideoLocators(url, cb);
      return this.getAllVideoLocators(url, cb);
    };

    CMF.prototype.getAnnotationsForVideo = function(resource, resCB) {
      var query, res;
      res = [];
      query = this._annotationsForVideo(resource);
      return this._runSPARQL(query, resCB);
    };

    CMF.prototype._annotationsForVideo = function(resource) {
      return "PREFIX oac: <http://www.openannotation.org/ns/>\nPREFIX ma: <http://www.w3.org/ns/ma-ont#>\nSELECT ?annotation ?fragment ?resource ?relation\nWHERE { <" + resource + ">  ma:hasFragment ?f.\n   ?f ma:locator ?fragment.\n   ?annotation oac:target ?f.\n   ?annotation oac:body ?resource.\n   ?f ?relation ?resource.}";
    };

    CMF.prototype.getAnnotationsForLocator = function(locator, resCB) {
      var query, res;
      res = [];
      query = this._annotationsForLocator(locator);
      return this._runSPARQL(query, resCB);
    };

    CMF.prototype._annotationsForLocator = function(locator) {
      return "PREFIX oac: <http://www.openannotation.org/ns/>\nPREFIX ma: <http://www.w3.org/ns/ma-ont#>\nSELECT ?annotation ?fragment ?resource ?relation\nWHERE { ?videoresource ma:locator <" + locator + ">.\n   ?videoresource ma:hasFragment ?f.\n   ?f ma:locator ?fragment.\n   ?annotation oac:target ?f.\n   ?annotation oac:body ?resource.\n   ?f ?relation ?resource.}";
    };

    CMF.prototype.getVideoLocators = function(resource, resCB) {
      var query, res;
      res = [];
      query = this._getVideoLocators(resource);
      return this._runSPARQL(query, function(err, res) {
        var locators;
        locators = _(res).map(function(l) {
          return {
            source: l.source.value,
            type: l.type.value
          };
        });
        return resCB(err, locators);
      });
    };

    CMF.prototype._getVideoLocators = function(resource) {
      return "PREFIX oac: <http://www.openannotation.org/ns/>\nPREFIX ma: <http://www.w3.org/ns/ma-ont#>\nSELECT ?source ?type\nWHERE { <" + resource + ">  ma:locator ?source.\n?source ma:hasFormat ?type}\nORDER BY ?source";
    };

    CMF.prototype.getAllVideoLocators = function(locator, resCB) {
      var query, res;
      res = [];
      query = this._getAllVideoLocators(locator);
      return this._runSPARQL(query, function(err, res) {
        var locators;
        locators = _(res).map(function(l) {
          return {
            source: l.source.value,
            type: l.type.value
          };
        });
        return resCB(err, locators);
      });
    };

    CMF.prototype._getAllVideoLocators = function(locator) {
      return "PREFIX oac: <http://www.openannotation.org/ns/>\nPREFIX ma: <http://www.w3.org/ns/ma-ont#>\nSELECT ?source ?type\nWHERE {\n?resource ma:locator <" + locator + ">.\n?resource  ma:locator ?source.\n?source ma:hasFormat ?type}\nORDER BY ?source";
    };

    CMF.prototype._runSPARQL = function(query, resCB) {
      var uri, xhr,
        _this = this;
      uri = "" + this.url + "sparql/select?query=" + (encodeURIComponent(query)) + "&output=json";
      xhr = jQuery.getJSON(uri, function(data) {
        var list, res;
        res = [];
        list = data.results.bindings;
        return resCB(null, list);
      });
      return xhr.error(resCB);
    };

    CMF.prototype.test = function() {
      var _this = this;
      this.getVideos(function(err, res) {
        if (err) {
          console.error("getVideos error", err, res);
          return;
        }
        return console.info("getVideos result", res);
      });
      return this.getAnnotatedVideos(function(err, res) {
        var firstVideo;
        if (err) {
          console.error("getAnnotatedVideos error", err, res);
          return;
        }
        console.info("getAnnotatedVideos result", res);
        firstVideo = res[0].instance.value;
        console.info("Getting locators for", firstVideo);
        _this.getVideoLocators(firstVideo, function(err, res) {
          var videolocator;
          if (err) {
            console.error("getVideoLocators error", err, res);
            return;
          }
          console.info("getVideoLocators result", res);
          videolocator = res[0].source;
          _this.getAllVideoLocators(videolocator, function(err, res) {
            if (err) {
              console.error("getAllVideoLocators error", err, res);
              return;
            }
            return console.info("getAllVideoLocators result", res);
          });
          _this.getAnnotationsForLocator(videolocator, function(err, annotations) {
            if (err) {
              console.error("getAnnotationsForLocator error", err, annotations);
              return;
            }
            return console.info("getAnnotationsForLocator result", annotations);
          });
          _this.getLocatorsForVideoOrLocator(firstVideo, function(err, res) {
            if (err) {
              console.error("getLocatorsForVideoOrLocator error", err, res);
              return;
            }
            return console.info("getLocatorsForVideoOrLocator result", firstVideo, res);
          });
          _this.getLocatorsForVideoOrLocator(videolocator, function(err, res) {
            if (err) {
              console.error("getLocatorsForVideoOrLocator error", err, res);
              return;
            }
            return console.info("getLocatorsForVideoOrLocator result", videolocator, res);
          });
          _this.getAnnotationsForVideoOrLocator(firstVideo, function(err, annotations) {
            if (err) {
              console.error("getAnnotationsForVideoOrLocator error", err, annotations);
              return;
            }
            return console.info("getAnnotationsForVideoOrLocator result", firstVideo, annotations);
          });
          return _this.getAnnotationsForVideoOrLocator(videolocator, function(err, annotations) {
            if (err) {
              console.error("getAnnotationsForVideoOrLocator error", err, annotations);
              return;
            }
            return console.info("getAnnotationsForVideoOrLocator result", videolocator, annotations);
          });
        });
        return _this.getAnnotationsForVideo(firstVideo, function(err, annotations) {
          if (err) {
            console.error("getAnnotationsForVideo error", err, annotations);
            return;
          }
          return console.info("getAnnotationsForVideo result", annotations);
        });
      });
    };

    return CMF;

  })();

  window.AnnotationOverlays = (function(_super) {

    __extends(AnnotationOverlays, _super);

    function AnnotationOverlays() {
      return AnnotationOverlays.__super__.constructor.apply(this, arguments);
    }

    AnnotationOverlays.prototype.init = function() {
      this.initSpacialAnnotations();
      this.initTimeAnnotations();
      return this.initConceptOverlay();
    };

    AnnotationOverlays.prototype.initSpacialAnnotations = function() {
      var annotation, container, limeplayer, _i, _len, _ref, _results,
        _this = this;
      console.info("Initialize SpacialAnnotationOverlays");
      this.lime.player.addComponent("SpacialAnnotationOverlaysComponent");
      this.lime.player.SpacialAnnotationOverlaysComponent.show();
      container = jQuery(".spacial-annotation-overlays-wrapper", this.lime.player.el);
      limeplayer = this.lime;
      jQuery(this.lime).bind("timeupdate", function(e) {});
      _ref = this.lime.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        jQuery(annotation).bind("becomeActive", function(e) {
          var domEl;
          annotation = e.annotation;
          if (annotation.end === 5) {
            console.info(annotation);
          }
          if (annotation.isSpacial && (annotation.w > 0) && (annotation.h > 0)) {
            container.prepend(_this.renderAnnotation(annotation));
            domEl = jQuery(".spatial_annotation:first", container);
            jQuery(domEl).data('annotation', annotation);
            domEl.mouseenter(function(e) {
              var mouseenterEvent;
              annotation = jQuery(e.target).data().annotation;
              mouseenterEvent = jQuery.Event("mouseenter");
              $(annotation).trigger(mouseenterEvent, ['test']);
              $(e.target).fadeOut(50);
              return $(e.target).fadeIn(50);
            });
            domEl.mouseleave(function(e) {
              var mouseleaveEvent;
              mouseleaveEvent = jQuery.Event("mouseleave");
              return $(annotation).trigger(mouseleaveEvent, ['test']);
            });
            domEl.click(function() {
              var i, widgets, _results1;
              limeplayer.player.pause();
              _results1 = [];
              for (i in annotation.widgets) {
                if (i !== "AnnotationOverlays") {
                  widgets = annotation.widgets[i];
                  _results1.push(widgets.addClass("highlighted").delay(2000).queue(function(next) {
                    $(this).removeClass("highlighted");
                    return next();
                  }));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            });
            annotation.widgets.AnnotationOverlays = domEl;
            return domEl;
          }
        });
        _results.push(jQuery(annotation).bind("becomeInactive", function(e) {
          annotation = e.annotation;
          if (annotation.end === 5) {
            console.info(annotation);
          }
          if (annotation.isSpacial && (annotation.w > 0) && (annotation.h > 0)) {
            annotation.widgets.AnnotationOverlays.remove();
            return delete annotation.widgets.AnnotationOverlays;
          } else {
            return false;
          }
        }));
      }
      return _results;
    };

    AnnotationOverlays.prototype.initTimeAnnotations = function() {
      var annotation, container, domEl, fullLength, leftPercent, _i, _len, _ref, _results,
        _this = this;
      console.info("Initialize TimeAnnotationOverlays");
      this.lime.player.controlBar.progressControl.addComponent("TimeAnnotationOverlaysComponent");
      this.lime.player.TimeAnnotationOverlaysComponent.show();
      container = jQuery(".time-annotation-overlays-wrapper", this.lime.player.controlBar.progressControl.el);
      fullLength = this.lime.getLength();
      console.info('length', fullLength);
      _ref = this.lime.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        leftPercent = annotation.start / fullLength * 100;
        container.prepend("<div class='time-annotation' style='left:" + leftPercent + "%;'>&nbsp;</div>");
        domEl = jQuery('.time-annotation:first', container);
        jQuery(domEl).data('annotation', annotation);
        domEl.click(function(e) {
          annotation = jQuery(e.target).data().annotation;
          _this.lime.seek(annotation.start);
          return _this.lime.play();
        });
        domEl.bind('mouseenter', function(e) {
          var mouseenterEvent;
          annotation = jQuery(e.target).data().annotation;
          mouseenterEvent = jQuery.Event("mouseenter");
          $(annotation).trigger(mouseenterEvent, ['test']);
          _this.fillConceptOverlay(_this.renderConceptOverlay(annotation));
          return _this.showConceptOverlay();
        });
        _results.push(domEl.mouseleave(function(e) {
          var mouseleaveEvent;
          annotation = jQuery(e.target).data().annotation;
          mouseleaveEvent = jQuery.Event("mouseleave");
          $(annotation).trigger(mouseleaveEvent, ['test']);
          return _this.hideConceptOverlay();
        }));
      }
      return _results;
    };

    AnnotationOverlays.prototype.initConceptOverlay = function() {
      var _this = this;
      this.lime.player.addComponent("ConceptOverlayComponent");
      this.lime.player.ConceptOverlayComponent.hide();
      this.conceptOverlayEl = jQuery(".concept-overlay", this.lime.player.el);
      jQuery(this.conceptOverlayEl).mouseenter(function() {
        return _this.showConceptOverlay();
      });
      return jQuery(this.conceptOverlayEl).mouseleave(function() {
        return _this.hideConceptOverlay();
      });
    };

    AnnotationOverlays.prototype.showConceptOverlay = function() {
      if (this.hideTimeoutHandle) {
        clearTimeout(this.hideTimeoutHandle);
        this.hideTimeoutHandle = void 0;
      }
      return this.lime.player.ConceptOverlayComponent.show();
    };

    AnnotationOverlays.prototype.hideConceptOverlay = function() {
      var _this = this;
      return this.hideTimeoutHandle = setTimeout(function() {
        _this.lime.player.ConceptOverlayComponent.hide();
        return _this.hideTimeoutHandle;
      }, 2000);
    };

    AnnotationOverlays.prototype.fillConceptOverlay = function(content) {
      return jQuery(this.conceptOverlayEl).html(content);
    };

    AnnotationOverlays.prototype.renderConceptOverlay = function(annotation) {
      var activeAnnotations, ann, currentTime, res, _i, _len;
      currentTime = annotation.start;
      activeAnnotations = _.filter(this.lime.annotations, function(ann) {
        return ann.start <= currentTime && ann.end > currentTime;
      });
      activeAnnotations = _(activeAnnotations).sortBy(function(ann) {
        return 0 - ann.start;
      });
      res = "";
      for (_i = 0, _len = activeAnnotations.length; _i < _len; _i++) {
        ann = activeAnnotations[_i];
        res += "<tr><td class='icon'>";
        if (ann.getDepiction()) {
          res += "<img src='" + (ann.getDepiction()) + "' style='height:20px;' />";
        }
        res += "</td>\n<td class='timeframe'>\n  " + (this.timeformat(ann.start)) + " - " + (this.timeformat(ann.end)) + "\n</td>\n<td class='label'>";
        if (ann.getPage()) {
          res += "<a href='" + (ann.getPage()) + "'>" + (ann.getLabel()) + "</a>";
        } else {
          res += "<span>" + (ann.getLabel()) + "</span>";
        }
        res += "</td></tr>";
      }
      res = jQuery("<table class=\"navlist\">" + res + "</table>");
      jQuery('li:first', res).addClass('active');
      return res.html();
    };

    AnnotationOverlays.prototype.timeformat = function(s) {
      var h, m, res, x;
      x = s;
      s = x % 60;
      x = (x - s) / 60;
      m = x % 60;
      h = (x - m) / 60;
      res = "";
      if (h) {
        res += "" + h + ":";
      }
      return res += "" + m + ":" + s;
    };

    AnnotationOverlays.prototype.renderAnnotation = function(annotation) {
      var label, props, unit,
        _this = this;
      if (annotation.ldLoaded) {
        props = annotation.entity[annotation.resource.value];
        label = _(props["http://www.w3.org/2000/01/rdf-schema#label"]).detect(function(labelObj) {
          return labelObj.lang === _this.lime.options.preferredLanguage;
        }).value;
      }
      if (label === undefined) {
        label = "";
      }
      unit = annotation.isPercent ? "%" : "px";
      return "<div class='spatial_annotation' style='position: absolute; width: " + annotation.w + unit + "; height: " + annotation.h + unit + "; left: " + annotation.x + unit + "; top: " + annotation.y + unit + "'>" + label + "</div>";
    };

    return AnnotationOverlays;

  })(window.LimePlugin);

  _V_.SpacialAnnotationOverlaysComponent = _V_.Component.extend({
    options: {
      loadEvent: "play"
    },
    init: function(player, options) {
      this._super(player, options);
      return this.player.SpacialAnnotationOverlaysComponent = this;
    },
    createElement: function() {
      return _V_.createElement("div", {
        className: "spacial-annotation-overlays-wrapper"
      });
    },
    fadeIn: function() {
      return this._super();
    },
    fadeOut: function() {
      return this._super();
    },
    lockShowing: function() {
      return this.el.style.opacity = "1";
    }
  });

  _V_.TimeAnnotationOverlaysComponent = _V_.Component.extend({
    options: {
      loadEvent: "play"
    },
    init: function(player, options) {
      this._super(player, options);
      return this.player.TimeAnnotationOverlaysComponent = this;
    },
    createElement: function() {
      return _V_.createElement("div", {
        className: "time-annotation-overlays-wrapper"
      });
    },
    fadeIn: function() {
      return this._super();
    },
    fadeOut: function() {
      return this._super();
    },
    lockShowing: function() {
      return this.el.style.opacity = "1";
    }
  });

  _V_.ConceptOverlayComponent = _V_.Component.extend({
    options: {
      loadEvent: "play"
    },
    init: function(player, options) {
      this._super(player, options);
      return this.player.ConceptOverlayComponent = this;
    },
    createElement: function() {
      var domEl;
      domEl = _V_.createElement("div", {
        className: "concept-overlay concept-list-overlay"
      });
      jQuery(domEl).html("<div class=\"navcontainer\">\n  <ul class=\"navlist\">\n    <li class=\"active\">\n      <a href=\"#\" class=\"current\">Item one</a>\n    </li>\n    <li>\n      <a href=\"#\">Item two</a>\n    </li>\n    <li>\n      <a href=\"#\">Item three</a>\n    </li>\n    <li>\n      <a href=\"#\">Item four</a>\n    </li>\n    <li>\n      <a href=\"#\">Item five</a>\n    </li>\n  </ul>\n</div>");
      return domEl;
    },
    fadeIn: function() {
      return this._super();
    },
    fadeOut: function() {
      return this._super();
    },
    lockShowing: function() {
      return this.el.style.opacity = "1";
    }
  });

  window.LDPlugin = (function(_super) {

    __extends(LDPlugin, _super);

    function LDPlugin() {
      this.init = __bind(this.init, this);
      return LDPlugin.__super__.constructor.apply(this, arguments);
    }

    LDPlugin.prototype.init = function() {
      var annotation, loadAnnotation, _i, _len, _ref, _results,
        _this = this;
      loadAnnotation = function(annotation) {
        var requestUrl;
        requestUrl = "" + _this.lime.options.annotFrameworkURL + "meta/application/json?uri=" + (encodeURIComponent(annotation.resource.value));
        return jQuery.ajax({
          url: requestUrl,
          success: function(res) {
            var lime;
            if (typeof res === 'string') {
              res = JSON.parse(res);
            }
            if (_.keys(res).length) {
              console.info(annotation.resource.value, res);
              annotation.entity = res;
              annotation.ldLoaded = true;
              jQuery(annotation).trigger(jQuery.Event("ldloaded", {
                entity: res
              }));
              lime = _this.lime;
              annotation.getLabel = function() {
                var label;
                label = _(this.entity['rdfs:label']).detect(function(labelObj) {
                  return labelObj["@language"] === lime.options.preferredLanguage;
                });
                if (!label) {
                  label = _(this.entity['rdfs:label']).detect(function(labelObj) {
                    return labelObj["@language"] === "en";
                  });
                  if (label) {
                    return label["@value"] + " (Not found in " + lime.options.preferredLanguage.toUpperCase() + ")";
                  }
                }
                return (label != null ? label["@value"] : void 0) || "No label found";
              };
              annotation.getDescription = function() {
                var label;
                label = _(this.entity['http://dbpedia.org/ontology/abstract']).detect(function(labelObj) {
                  return labelObj["@language"] === lime.options.preferredLanguage;
                });
                if (!label) {
                  label = _(this.entity['http://dbpedia.org/ontology/abstract']).detect(function(labelObj) {
                    return labelObj["@language"] === "en";
                  });
                  if (label) {
                    label["@value"] += " (Not found in " + lime.options.preferredLanguage.toUpperCase() + ")";
                  }
                }
                return label = (label != null ? label["@value"] : void 0) || "No label found";
              };
              annotation.getDepiction = function() {
                var depiction, _ref;
                depiction = (_ref = this.entity['foaf:depiction']) != null ? _ref["@id"] : void 0;
                return depiction;
              };
              return annotation.getPage = function() {
                var page, _ref;
                page = (_ref = this.entity['http://xmlns.com/foaf/0.1/homepage']) != null ? _ref["@id"] : void 0;
                return page;
              };
            }
          }
        });
      };
      ({
        error: function(err) {
          return console.error(arguments);
        }
      });
      _ref = this.lime.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        _results.push(loadAnnotation(annotation));
      }
      return _results;
    };

    return LDPlugin;

  })(window.LimePlugin);

  RDF = (function() {

    function RDF(hash) {}

    return RDF;

  })();

}).call(this);
