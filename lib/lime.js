// Generated by CoffeeScript 1.3.1
(function() {
  var Annotation, URI,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.LIMEPlayer = (function() {

    LIMEPlayer.name = 'LIMEPlayer';

    function LIMEPlayer(opts) {
      var options,
        _this = this;
      options = {
        containerDiv: "mainwrapper",
        videoPlayerSize: {
          "width": 640,
          "height": 360
        },
        annotFrameworkURL: "http://labs.newmedialab.at/SKOS/",
        plugins: [TestPlugin],
        platform: "web",
        fullscreen: false,
        fullscreenLayout: {
          "AnnotationNorth": 50,
          "AnnotationWest": 300,
          "AnnotationSouth": 50,
          "AnnotationEast": 300
        },
        widgetContainers: [
          {
            element: jQuery('#widget-container-1'),
            orientation: 'vertical'
          }
        ],
        usedSpaceNWSE: {
          "north": 0,
          "west": 0,
          "south": 0,
          "east": 0
        },
        annotationsVisible: true,
        debug: false
      };
      this.options = $.extend(options, opts);
      this.widgetContainers = this.options.widgetContainers;
      this._initVideoPlayer(function() {
        return _this._loadAnnotations(function() {
          return _this._initPlugins(function() {
            return _this._startScheduler();
          });
        });
      });
    }

    LIMEPlayer.prototype._startScheduler = function() {
      /* handle becomeActive and becomeInactive events
      */
      return jQuery(this).bind('timeupdate', function(e) {
        var annotation, currentTime, _i, _len, _ref, _results;
        _ref = this.annotations;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          annotation = _ref[_i];
          currentTime = e.currentTime;
          if (annotation.state === 'inactive' && annotation.start < currentTime && annotation.end + 1 > currentTime) {
            annotation.state = 'active';
            jQuery(annotation).trigger(jQuery.Event("becomeActive", {
              annotation: annotation
            }));
          }
          if (annotation.state === 'active' && (annotation.start > currentTime || annotation.end + 1 < currentTime)) {
            annotation.state = 'inactive';
            _results.push(jQuery(annotation).trigger(jQuery.Event("becomeInactive", {
              annotation: annotation
            })));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    };

    LIMEPlayer.prototype._initVideoPlayer = function(cb) {
      var displaysrc, i, source, _i, _len, _ref,
        _this = this;
      displaysrc = '';
      _ref = this.options.video;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        source = _ref[i];
        displaysrc = displaysrc + ("<source src=" + source + " type='video/" + (source.match(/.([a-z|A-Z|0-9]*)$/)[1]) + "' />");
      }
      $("#" + this.options.containerDiv).append("<div class='videowrapper' id='videowrapper'>\n  <video id='video_player' class='video-js vjs-default-skin' controls preload='none' width='640' height='360' poster='img/connectme-video-poster.jpg'>\n    " + displaysrc + "\n  </video>\n</div>\n<div class=\"annotation-wrapper\" id=\"annotation-wrapper\" style=\"display: none;\">\n<div class=\"north fullscreen-annotation\" style=\"height: " + this.options.fullscreenLayout.AnnotationNorth + "px\"></div>\n  <div class=\"west fullscreen-annotation\" style=\"height: " + this.options.fullscreenLayout.AnnotationSouth + "px\"></div>\n  <div class=\"east fullscreen-annotation\" style=\"height: " + this.options.fullscreenLayout.AnnotationEast + "px\"></div>\n  <div class=\"south fullscreen-annotation\" style=\"height: " + this.options.fullscreenLayout.AnnotationNorth + "px\"></div>\n</div>");
      return _.defer(function() {
        _this.player = _V_('video_player', {
          flash: {
            iFrameMode: true
          },
          swf: "lib/videojs/video-js.swf"
        });
        _this.player.addEvent("loadedmetadata", function() {
          _this._initEventListeners();
          return cb();
        });
        return _this.player.ready(function() {
          var nonfullscreen_containers;
          _this.player.isFullScreen = _this.options.fullscreen;
          nonfullscreen_containers = LimePlayer.widgetContainers;
          _this.player.addComponent("AnnotationsSidebars");
          _this.player.controlBar.addComponent("AnnotationToggle");
          if (!_this.player.isFullScreen) {
            _this.player.AnnotationsSidebars.hide();
          } else {
            _this.player.AnnotationsSidebars.show();
          }
          _this.player.play();
          return console.info("Setting up VideoJS Player", _this.player);
        });
      });
    };

    LIMEPlayer.prototype._initEventListeners = function() {
      var _this = this;
      this.player.addEvent('timeupdate', function(playerEvent) {
        var e;
        e = jQuery.Event("timeupdate", {
          currentTime: _this.player.currentTime()
        });
        return jQuery(_this).trigger(e);
      });
      return this.player.addEvent('fullscreenchange', function(e) {
        var fsce;
        fsce = jQuery.Event('fullscreenchange', {
          isFullScreen: _this.player.isFullScreen
        });
        jQuery(_this.player).trigger(fsce);
        return _this._moveWidgets(_this.player.isFullScreen);
      });
    };

    LIMEPlayer.prototype._loadAnnotations = function(cb) {
      var query, uri,
        _this = this;
      console.info("Loading annotations from LMF");
      this.annotations = [];
      query = "PREFIX oac: <http://www.openannotation.org/ns/>\nPREFIX ma: <http://www.w3.org/ns/ma-ont#>\nSELECT ?annotation ?fragment ?resource ?relation\nWHERE { <" + this.options.video[0] + ">  ma:hasFragment ?f.\n   ?f ma:locator ?fragment.\n   ?annotation oac:target ?f.\n   ?annotation oac:body ?resource.\n   ?f ?relation ?resource.\n}";
      uri = "" + this.options.annotFrameworkURL + "sparql/select?query=" + (encodeURIComponent(query)) + "&output=json";
      return $.getJSON(uri, function(data) {
        var annotation, i, list;
        list = data.results.bindings;
        for (i in list) {
          annotation = list[i];
          _this.annotations.push(new Annotation(annotation));
        }
        console.info("Annotations loaded from", uri, _this.annotations);
        return cb();
      });
    };

    LIMEPlayer.prototype._moveWidgets = function(isFullscreen) {
      var annotation, _i, _len, _ref;
      console.log("fullscreen", isFullscreen, ", Visible " + LimePlayer.options.annotationsVisible);
      if (isFullscreen && LimePlayer.options.annotationsVisible) {
        LimePlayer.widgetContainers = [
          {
            element: jQuery('.west'),
            orientation: 'vertical'
          }, {
            element: jQuery('.north'),
            orientation: 'horizontal'
          }, {
            element: jQuery('.east'),
            orientation: 'vertical'
          }, {
            element: jQuery('.south'),
            orientation: 'horizontal'
          }
        ];
        LimePlayer.player.AnnotationsSidebars.show();
      } else {
        LimePlayer.widgetContainers = nonfullscreen_containers;
        LimePlayer.player.AnnotationsSidebars.hide();
      }
      _ref = LimePlayer.annotations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        if (annotation.state === 'active') {
          jQuery(annotation).trigger(jQuery.Event("becomeInactive", {
            annotation: annotation
          }));
          jQuery(annotation).trigger(jQuery.Event("becomeActive", {
            annotation: annotation
          }));
        }
      }
      return console.info("_moveWidgets", isFullscreen);
    };

    LIMEPlayer.prototype._initPlugins = function(cb) {
      var pluginClass, _i, _len, _ref;
      this.plugins = [];
      _ref = this.options.plugins;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pluginClass = _ref[_i];
        this.plugins.push(new pluginClass(this));
      }
      return cb();
    };

    LIMEPlayer.prototype.allocateWidgetSpace = function(options) {
      var container,
        _this = this;
      if (options && options.preferred && this._hasFreeSpace(options.preferred, options)) {
        container = options.preferred;
      } else {
        container = _(this.widgetContainers).detect(function(cont) {
          return _this._hasFreeSpace(cont, options);
        });
      }
      if (container) {
        container.element.prepend("<div class='lime-widget'></div>");
        return jQuery(".lime-widget:first", container.element);
      } else {
        console.error("There's not enough space for a widget to be shown!");
        if (this.options.debug) {
          debugger;
        }
        return false;
      }
      /*
          container = _(@widgetContainers).detect (cont) =>
            @_hasFreeSpace cont, options
          if container
            container.element.prepend "<div class='lime-widget'>123</div>"
            jQuery('.lime-widget:first', container.element)
          else
            no
      */

    };

    LIMEPlayer.prototype._hasFreeSpace = function(container, options) {
      var currentHeight, maxHeight;
      currentHeight = container.element.height();
      maxHeight = parseInt(container.element.css("max-height"));
      if ((!maxHeight) || (maxHeight === NaN)) {
        maxHeight = $(window).height() - 300;
      }
      if (maxHeight - currentHeight < 200) {
        return false;
      } else {
        return true;
      }
    };

    LIMEPlayer.prototype.getAnnotationsFor = function(uri, cb) {};

    return LIMEPlayer;

  })();

  Annotation = (function() {

    Annotation.name = 'Annotation';

    function Annotation(hash) {
      var fragmentHash, startEnd, t, xywh, _ref, _ref1, _ref2, _ref3;
      this.annotation = hash.annotation.value;
      this.start = 0;
      this.end = -1;
      this.state = 'inactive';
      this.widgets = {};
      if (hash.fragment.type = 'uri') {
        this.fragment = new URI(hash.fragment.value);
        fragmentHash = this.fragment.hash;
        t = fragmentHash.match(/t=([0-9,]*)/);
        if (t) {
          t = t[1];
          startEnd = t.match(/([0-9]{1,})/g);
          if (startEnd) {
            this.start = Number(startEnd[0]);
            this.end = Number(startEnd[1]) || -1;
          }
        }
        xywh = fragmentHash.match(/xywh=([a-z0-9,:]*)/);
        if (xywh) {
          this.isPercent = xywh[1].indexOf('percent') !== -1;
          _ref = _(xywh[1].match(/([0-9]{1,})/g)).map(function(n) {
            return Number(n);
          }), this.x = _ref[0], this.y = _ref[1], this.w = _ref[2], this.h = _ref[3];
        }
      }
      this.isSpacial = this.x !== void 0 || ((((this.x === (_ref3 = this.y) && _ref3 === (_ref2 = this.w)) && _ref2 === (_ref1 = this.h)) && _ref1 === 0));
      this.resource = new URI(hash.resource.value);
      this.relation = new URI(hash.relation.value);
    }

    return Annotation;

  })();

  URI = (function() {

    URI.name = 'URI';

    function URI(uri) {
      var hash;
      this.value = decodeURIComponent(uri);
      hash = uri.match(/^.*?#([a-zA-Z0-9,&=:]*)$/);
      if (hash) {
        this.hash = hash[1];
      } else {
        this.hash = '';
      }
      this.type = 'uri';
    }

    URI.prototype.toString = function() {
      return this.value;
    };

    return URI;

  })();

  window.LimePlugin = (function() {

    LimePlugin.name = 'LimePlugin';

    function LimePlugin(lime) {
      this.lime = lime;
      this.init();
    }

    LimePlugin.prototype.init = function() {
      return console.error("All Lime plugins have to implement the init method!");
    };

    return LimePlugin;

  })();

  window.TestPlugin = (function(_super) {

    __extends(TestPlugin, _super);

    TestPlugin.name = 'TestPlugin';

    function TestPlugin() {
      return TestPlugin.__super__.constructor.apply(this, arguments);
    }

    TestPlugin.prototype.init = function() {
      var annotation, _i, _len, _ref, _results,
        _this = this;
      console.info("Initialize TestPlugin");
      jQuery(this.lime).bind('timeupdate', function(e) {
        return console.info('plugin timeupdate event', e.currentTime);
      });
      _ref = this.lime.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        jQuery(annotation).bind('becomeActive', function(e) {
          var domEl;
          console.info(e.annotation, 'became active');
          domEl = _this.lime.allocateWidgetSpace();
          if (domEl) {
            domEl.html("<a href='" + e.annotation.resource + "' target='_blank'>" + e.annotation.resource + "</a>");
            if (e.annotation.ldLoaded) {
              domEl.html(_this.renderAnnotation(e.annotation));
            } else {
              jQuery(e.annotation).bind('ldloaded', function(e2) {
                return domEl.html(_this.renderAnnotation(e2.annotation));
              });
            }
            return e.annotation.widgets.TestPlugin = domEl;
          } else {

          }
        });
        _results.push(jQuery(annotation).bind("becomeInactive", function(e) {
          console.info(e.annotation, 'became inactive');
          e.annotation.widgets.TestPlugin.remove();
          if (e.annotation.widgets) {
            return delete e.annotation.widgets.TestPlugin;
          } else {
            debugger;
          }
        }));
      }
      return _results;
    };

    TestPlugin.prototype.renderAnnotation = function(annotation) {
      var depiction, label, page, props, _ref, _ref1;
      props = annotation.entity[annotation.resource.value];
      label = _(props['http://www.w3.org/2000/01/rdf-schema#label']).detect(function(labelObj) {
        return labelObj.lang === 'en';
      }).value;
      depiction = (_ref = props['http://xmlns.com/foaf/0.1/depiction']) != null ? _ref[0].value : void 0;
      page = (_ref1 = props['http://xmlns.com/foaf/0.1/page']) != null ? _ref1[0].value : void 0;
      return "<p>\n  <a href=\"" + page + "\" target=\"_blank\">" + label + "</a>\n</p>\n<p>\n  <img src=\"" + depiction + "\" width=\"200\"/>\n</p>";
    };

    return TestPlugin;

  })(window.LimePlugin);

  window.AnnotationOverlays = (function(_super) {

    __extends(AnnotationOverlays, _super);

    AnnotationOverlays.name = 'AnnotationOverlays';

    function AnnotationOverlays() {
      return AnnotationOverlays.__super__.constructor.apply(this, arguments);
    }

    AnnotationOverlays.prototype.init = function() {
      var annotation, container, limeplayer, _i, _j, _len, _len1, _ref, _ref1, _results, _results1,
        _this = this;
      annotation = void 0;
      _i = void 0;
      _len = void 0;
      _ref = void 0;
      _results = void 0;
      _this = this;
      container = void 0;
      console.info("Initialize AnnotationOverlays");
      this.lime.player.addComponent("AnnotationOverlaysComponent");
      this.lime.player.AnnotationOverlaysComponent.show();
      container = jQuery(".annotation-overlays-wrapper");
      limeplayer = this.lime;
      jQuery(this.lime).bind("timeupdate", function(e) {});
      _ref1 = this.lime.annotations;
      _results1 = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        annotation = _ref1[_j];
        _results1.push(jQuery(annotation).bind("becomeActive", function(e) {
          var domEl;
          if (e.annotation.isSpacial && (e.annotation.w > 0) && (e.annotation.h > 0)) {
            container.prepend(_this.renderAnnotation(e.annotation));
            domEl = jQuery(".spatial_annotation:first", container.element);
            domEl.hover(function() {
              $(this).fadeOut(50);
              return $(this).fadeIn(50);
            });
            domEl.click(function() {
              var i, widgets, _results2;
              limeplayer.player.pause();
              _results2 = [];
              for (i in e.annotation.widgets) {
                if (i !== "AnnotationOverlays") {
                  widgets = e.annotation.widgets[i];
                  _results2.push(widgets.addClass("lime-widget-highlighted").delay(2000).queue(function(next) {
                    $(this).removeClass("lime-widget-highlighted");
                    return next();
                  }));
                } else {
                  _results2.push(void 0);
                }
              }
              return _results2;
            });
            e.annotation.widgets.AnnotationOverlays = domEl;
            return domEl;
          } else {
            return jQuery(annotation).bind("becomeInactive", function(e) {
              if (e.annotation.isSpacial && (e.annotation.w > 0) && (e.annotation.h > 0)) {
                e.annotation.widgets.AnnotationOverlays.remove();
                return delete e.annotation.widgets.AnnotationOverlays;
              } else {
                return false;
              }
            });
          }
        }));
      }
      return _results1;
    };

    AnnotationOverlays.prototype.renderAnnotation = function(annotation) {
      var depiction, label, page, percentpixel, props, _ref, _ref1;
      depiction = void 0;
      label = void 0;
      page = void 0;
      props = void 0;
      _ref = void 0;
      _ref1 = void 0;
      percentpixel = "px";
      if (annotation.isPercent) {
        percentpixel = "%";
      }
      if (annotation.ldLoaded) {
        props = annotation.entity[annotation.resource.value];
        label = _(props["http://www.w3.org/2000/01/rdf-schema#label"]).detect(function(labelObj) {
          return labelObj.lang === "en";
        }).value;
      }
      if (label === undefined) {
        label = "";
      }
      return "<div class='spatial_annotation' style='position: absolute; width: " + annotation.w + percentpixel + "; height: " + annotation.h + percentpixel + "; left: " + annotation.x + percentpixel + "; top: " + annotation.y + percentpixel + "'>" + label + "</div>";
    };

    return AnnotationOverlays;

  })(window.LimePlugin);

  _V_.AnnotationOverlaysComponent = _V_.Component.extend({
    options: {
      loadEvent: "play"
    },
    init: function(player, options) {
      this._super(player, options);
      return this.player.AnnotationOverlaysComponent = this;
    },
    createElement: function() {
      var d;
      d = _V_.createElement("div", {
        className: "annotation-overlays-wrapper"
      });
      return d;
    },
    fadeIn: function() {
      return this._super();
    },
    fadeOut: function() {
      return this._super();
    },
    lockShowing: function() {
      return this.el.style.opacity = "1";
    }
  });

}).call(this);
