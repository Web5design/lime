// Generated by CoffeeScript 1.3.3
(function() {
  var RDF,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.LDPlugin = (function(_super) {

    __extends(LDPlugin, _super);

    function LDPlugin() {
      this.init = __bind(this.init, this);
      return LDPlugin.__super__.constructor.apply(this, arguments);
    }

    LDPlugin.prototype.init = function() {
      var annotation, loadAnnotation, _i, _len, _ref, _results,
        _this = this;
      loadAnnotation = function(annotation) {
        var requestUrl;
        requestUrl = "" + _this.lime.options.annotFrameworkURL + "meta/application/json?uri=" + (encodeURIComponent(annotation.resource.value));
        return jQuery.ajax({
          url: requestUrl,
          success: function(res) {
            var lime;
            if (typeof res === 'string') {
              res = JSON.parse(res);
            }
            if (_.keys(res).length) {
              console.info(annotation.resource.value, res);
              annotation.entity = res;
              annotation.ldLoaded = true;
              jQuery(annotation).trigger(jQuery.Event("ldloaded", {
                entity: res
              }));
              lime = _this.lime;
              annotation.getLabel = function() {
                var label;
                label = _(this.entity['rdfs:label']).detect(function(labelObj) {
                  return labelObj["@language"] === lime.options.preferredLanguage;
                });
                if (!label) {
                  label = _(this.entity['rdfs:label']).detect(function(labelObj) {
                    return labelObj["@language"] === "en";
                  });
                  if (label) {
                    return label["@value"] + " (Not found in " + lime.options.preferredLanguage.toUpperCase() + ")";
                  }
                }
                return (label != null ? label["@value"] : void 0) || "No label found";
              };
              annotation.getDescription = function() {
                var label;
                label = _(this.entity['http://dbpedia.org/ontology/abstract']).detect(function(labelObj) {
                  return labelObj["@language"] === lime.options.preferredLanguage;
                });
                if (!label) {
                  label = _(this.entity['http://dbpedia.org/ontology/abstract']).detect(function(labelObj) {
                    return labelObj["@language"] === "en";
                  });
                  if (label) {
                    label["@value"] += " (Not found in " + lime.options.preferredLanguage.toUpperCase() + ")";
                  }
                }
                return label = (label != null ? label["@value"] : void 0) || "No label found";
              };
              annotation.getDepiction = function() {
                var depiction, _ref;
                depiction = (_ref = this.entity['foaf:depiction']) != null ? _ref["@id"] : void 0;
                return depiction;
              };
              annotation.getPage = function() {
                var page, _ref;
                page = (_ref = this.entity['http://xmlns.com/foaf/0.1/homepage']) != null ? _ref["@id"] : void 0;
                return page;
              };
              return annotation.getName = function() {
                var label;
                label = _(this.entity['http://www.geonames.org/ontology#alternateName']).detect(function(labelObj) {
                  return labelObj["@language"] === lime.options.preferredLanguage;
                });
                if (!label) {
                  label = _(this.entity['http://www.geonames.org/ontology#alternateName']).detect(function(labelObj) {
                    return labelObj["@language"] === "en";
                  });
                  if (label) {
                    return label["@value"] + " (Not found in " + lime.options.preferredLanguage.toUpperCase() + ")";
                  }
                }
                return (label != null ? label["@value"] : void 0) || "No label found";
              };
            }
          }
        });
      };
      ({
        error: function(err) {
          return console.error(arguments);
        }
      });
      _ref = this.lime.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        _results.push(loadAnnotation(annotation));
      }
      return _results;
    };

    return LDPlugin;

  })(window.LimePlugin);

  RDF = (function() {

    function RDF(hash) {}

    return RDF;

  })();

}).call(this);
