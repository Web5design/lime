// Generated by CoffeeScript 1.3.3
(function() {
  var RDF,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.LDPlugin = (function(_super) {

    __extends(LDPlugin, _super);

    function LDPlugin() {
      return LDPlugin.__super__.constructor.apply(this, arguments);
    }

    LDPlugin.prototype.init = function() {
      var annotation, _i, _len, _ref, _results;
      this.vie = this.lime.options.vie || this.options.vie;
      if (!this.vie) {
        if (this.lime.options.local) {
          jQuery.noop();
        }
        this.vie = new VIE();
        this.vie.use(new this.vie.StanbolService({
          url: this.options.stanbolUrl
        }));
      }
      _ref = this.lime.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        annotation.lime = this.lime;
        _results.push(this.loadAnnotation(annotation));
      }
      return _results;
    };

    LDPlugin.prototype.defaults = {
      stanbolUrl: "http://dev.iks-project.eu/stanbolfull",
      followRedirects: ['dbpedia:wikiPageRedirects', 'rdfs:seeAlso', 'owl:sameAs']
    };

    LDPlugin.prototype.loadAnnotation = function(annotation) {
      var entityUri, error, recursiveFetch, requestUrl,
        _this = this;
      annotation.entityPromise = jQuery.Deferred();
      entityUri = annotation.resource.value;
      error = function(err) {
        return console.error("Couldn't load entity " + entityUri, err);
      };
      recursiveFetch = function(entityUri, props, depth, cb) {
        var results, success;
        results = [];
        success = function(res) {
          var entity, prop, redirUrl, redirects, waitfor, _i, _j, _len, _len1, _results;
          entity = _.detect(res, function(ent) {
            return ent.fromReference(ent.getSubject()) === ent.fromReference(entityUri);
          });
          results.push(entity);
          if (depth === 0) {
            return cb(_.flatten(results));
          } else {
            redirects = [];
            for (_i = 0, _len = props.length; _i < _len; _i++) {
              prop = props[_i];
              redirects.push(entity.get(prop));
            }
            redirects = _.flatten(redirects);
            redirects = _.uniq(redirects);
            redirects = _.compact(redirects);
            waitfor = redirects.length;
            if (waitfor) {
              _results = [];
              for (_j = 0, _len1 = redirects.length; _j < _len1; _j++) {
                redirUrl = redirects[_j];
                _results.push(recursiveFetch(redirUrl, props, depth - 1, function(r) {
                  results.push(r);
                  waitfor--;
                  if (waitfor === 0) {
                    return cb(_(results).flatten());
                  }
                }));
              }
              return _results;
            } else {
              return cb(_(results).flatten());
            }
          }
        };
        return _this.vie.load({
          entity: entityUri
        }).using('stanbol').execute().fail(error).success(success);
      };
      recursiveFetch(entityUri, this.options.followRedirects, 2, function(res) {
        annotation.entities = res;
        annotation.getLabel = function() {
          var entity, value, _i, _len, _ref;
          _ref = this.entities;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            entity = _ref[_i];
            value = VIE.Util.getPreferredLangForPreferredProperty(entity, ['rdfs:label'], [this.lime.options.preferredLanguage, 'en']);
            if (value !== "n/a") {
              return value;
            }
          }
          return 'No label found.';
        };
        annotation.getDescription = function() {
          var entity, value, _i, _len, _ref;
          _ref = this.entities;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            entity = _ref[_i];
            value = VIE.Util.getPreferredLangForPreferredProperty(entity, ['dbpedia:abstract', 'rdfs:comment'], [this.lime.options.preferredLanguage, 'en']);
            if (value !== "n/a") {
              return value;
            }
          }
          return 'No label found.';
        };
        annotation.getDepiction = function() {
          var depiction, entity, result, singleDepiction, _i, _len, _ref;
          _ref = this.entities;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            entity = _ref[_i];
            result = "";
            depiction = entity.get('foaf:depiction');
            if (depiction) {
              if (_.isArray(depiction)) {
                singleDepiction = _.detect(depiction, function(d) {
                  return d.indexOf('thumb') !== -1;
                });
                if (!singleDepiction) {
                  singleDepiction = depiction[0];
                }
              } else {
                singleDepiction = depiction;
              }
              result = entity.fromReference(singleDepiction);
            }
            if (result) {
              return result;
            }
          }
          return null;
        };
        annotation.getPage = function() {
          var entity, value, _i, _len, _ref;
          _ref = this.entities;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            entity = _ref[_i];
            value = entity.get('foaf:homepage');
            if (value) {
              return value;
            }
          }
          return this.entities[0].fromReference(entity.getSubject());
        };
        return annotation.entityPromise.resolve(annotation.entities);
      });
      return;
      requestUrl = "" + this.lime.options.annotFrameworkURL + "meta/application/json?uri=" + (encodeURIComponent(annotation.resource.value));
      return jQuery.ajax({
        url: requestUrl,
        timeout: 2000,
        success: function(res) {
          var lime;
          if (typeof res === 'string') {
            res = JSON.parse(res);
          }
          if (_.keys(res).length) {
            console.info(annotation.resource.value, res);
            lime = _this.lime;
            annotation.getLabel = function() {
              var label;
              label = _(this.entity['rdfs:label']).detect(function(labelObj) {
                return labelObj["@language"] === lime.options.preferredLanguage;
              });
              if (!label) {
                label = _(this.entity['rdfs:label']).detect(function(labelObj) {
                  return labelObj["@language"] === "en";
                });
                if (label) {
                  return label["@value"] + " (Not found in " + lime.options.preferredLanguage.toUpperCase() + ")";
                }
              }
              return (label != null ? label["@value"] : void 0) || "No label found";
            };
            annotation.getDescription = function() {
              var label;
              label = _(this.entity['http://dbpedia.org/ontology/abstract']).detect(function(labelObj) {
                return labelObj["@language"] === lime.options.preferredLanguage;
              });
              if (!label) {
                label = _(this.entity['http://dbpedia.org/ontology/abstract']).detect(function(labelObj) {
                  return labelObj["@language"] === "en";
                });
                if (label) {
                  label["@value"] += " (Not found in " + lime.options.preferredLanguage.toUpperCase() + ")";
                }
              }
              return label = (label != null ? label["@value"] : void 0) || "No label found";
            };
            annotation.getDepiction = function() {
              var depiction, _ref;
              depiction = (_ref = this.entity['foaf:depiction']) != null ? _ref["@id"] : void 0;
              return depiction;
            };
            annotation.getPage = function() {
              var page, _ref;
              page = (_ref = this.entity['http://xmlns.com/foaf/0.1/homepage']) != null ? _ref["@id"] : void 0;
              return page;
            };
            annotation.entity = res;
            annotation.ldLoaded = true;
            return jQuery(annotation).trigger(jQuery.Event("ldloaded", {
              entity: res
            }));
          }
        },
        error: function(jqXhr, message) {
          alert("Linked data plugin couldn't load the entity because of '" + message + "'");
          return console.error("LDPlugin error", message);
        }
      });
    };

    return LDPlugin;

  })(window.LimePlugin);

  RDF = (function() {

    function RDF(hash) {}

    return RDF;

  })();

}).call(this);
