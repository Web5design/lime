// Generated by CoffeeScript 1.3.1
(function() {
  var RDF,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.LDPlugin = (function(_super) {

    __extends(LDPlugin, _super);

    LDPlugin.name = 'LDPlugin';

    function LDPlugin() {
      this.init = __bind(this.init, this);
      return LDPlugin.__super__.constructor.apply(this, arguments);
    }

    LDPlugin.prototype.init = function() {
      var annotation, loadAnnotation, _i, _len, _ref, _results,
        _this = this;
      loadAnnotation = function(annotation) {
        var requestUrl;
        requestUrl = "" + _this.lime.options.annotFrameworkURL + "meta/application/json?uri=" + (encodeURIComponent(annotation.resource.value));
        return jQuery.ajax({
          url: requestUrl,
          success: function(res) {
			if(typeof(res)!= "object") res = JSON.parse(res);	//added to fix a problem where res was of type string in Firefox, but object in Chrome
            if (_.keys(res).length) {
              
              annotation.entity = res;
              annotation.ldLoaded = true;
              return jQuery(annotation).trigger(jQuery.Event("ldloaded", {
                entity: res
              }));
            }
          },
          error: function(err) {
            return console.error(arguments);
          }
        });
      };
      _ref = this.lime.annotations;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        annotation = _ref[_i];
        _results.push(loadAnnotation(annotation));
      }
      return _results;
    };

    return LDPlugin;

  })(window.LimePlugin);

  RDF = (function() {

    RDF.name = 'RDF';

    function RDF(hash) {}

    return RDF;

  })();

}).call(this);
